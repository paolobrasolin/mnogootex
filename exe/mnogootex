#!/usr/bin/env ruby
# coding: utf-8

require 'mnogootex'

puts "Mnogootex v#{Mnogootex::VERSION}"

# require 'pathname'

# target = ARGV[0]
# target_path = File.expand_path target
# cfg = Mnogootex::Configuration.new
# cfg.load target_path

require 'tmpdir'
require 'fileutils'
require 'open3'

require 'colorize'

target = ARGV[0]

main_path = File.expand_path(target)
main_basename = File.basename main_path
main_dirname = File.dirname main_path

cfg = Mnogootex::Configuration.new
cfg.load main_dirname
puts cfg

raise "File non esiste." unless File.exist? main_path

@documentclasses = cfg['compile_with']

$jobs = []
$threads = []
$draw_threads = []

$threads = []

$anim = cfg['animation'].freeze

STDOUT.sync = true

def draw_status
  icons = $jobs.map do |j|
    icon = $anim[j.ticks % $anim.length]
    case j.thread.status
    when 'sleep', 'run', 'aborting'
      icon.yellow
    when false, nil # exited (normally or w/ error)
      j.success? ? icon.green : icon.red
    end
  end
  print '  Jobs: ' + icons.join + "\r"
end

draw_status

@documentclasses.each_with_index do |cls, index|
  job = Mnogootex::Job.new cls: cls, target: main_path
  job.setup
  job.run

  $jobs << job

  $draw_threads << job.tick_thread
  $threads << job.thread
end

$threads.map(&:join)
$draw_threads.map(&:join)

puts

puts '  Details:'
$jobs.each do |job|
  if job.success?
    puts '    ' + "✔".green + ' ' + File.basename(job.cls)
  else
    puts '    ' + "✘".red + ' ' + File.basename(job.cls)
    puts job.log[2..-2].join.gsub(/^/,' '*6).chomp.red
  end
end
